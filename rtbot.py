import codecs
import json
import random
import time

from sklearn.ensemble import RandomForestClassifier
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split


def clean(text):
    clean_text = ''
    for ch in text.lower():
        if ch in '–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è ':
            clean_text = clean_text + ch
    return clean_text


file = codecs.open('Dataset3.json', 'r', 'utf-8')
BOT_CONFIG = json.load(file)
file.close()
print(len(BOT_CONFIG['intents'].keys()))

texts = []
y = []
for intent in BOT_CONFIG['intents'].keys():
    for example in BOT_CONFIG['intents'][intent]['examples']:
        texts.append(example)
        y.append(intent)
print(len(texts), len(y))

train_texts, test_texts, y_train, y_test = train_test_split(texts, y, random_state=42, test_size=0.2)

vectorizer = CountVectorizer(ngram_range=(2, 5), min_df=1, max_df=7, analyzer='char_wb')
X_train = vectorizer.fit_transform(train_texts)
X_test = vectorizer.transform(test_texts)

vocab = vectorizer.get_feature_names_out()
print(len(vocab))

clf = RandomForestClassifier(n_estimators=300).fit(X_train, y_train)
print(clf.score(X_train, y_train), clf.score(X_test, y_test))


def get_intent_by_model(text):
    return clf.predict(vectorizer.transform([text]))[0]


def bot(input_text):
    intent = get_intent_by_model(input_text)
    return random.choice(BOT_CONFIG['intents'][intent]['responses'])


## –î–æ–±–∞–≤–∏–ª–∏ —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–æ–∫
def req(input_text):
    call2 = input_text.replace(' ', '')
    if call2[0] == 'h' and call2[4] == 's':
        call3 = call2[8:]
    elif call2[0] == 'h' and call2[4] == ':':
        call3 = call2[7:]
    else:
        call3 = call2
    if call3[-1] == '/':
        call = call3[:-1]
    else:
        call = call3
    return call


input_text = ''
while input_text != 'stop':
    input_text = input()
    if input_text != 'stop':
        response = bot(input_text)
        print(response)

#  –î–æ–±–∞–≤–∏–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Å—ã–ª–æ–∫
input_site_checker_listener = False

import logging

from telegram import KeyboardButton, ReplyKeyboardMarkup
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram import Update
from telegram.ext import Updater, CommandHandler, MessageHandler, CallbackContext, Filters
from config import TOKEN

# Enable logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)

logger = logging.getLogger(__name__)


# Define a few command handlers. These usually take the two arguments update and
# context.
def start(update: Update, context: CallbackContext) -> None:
    #     """Send a message when the command /start is issued."""
    user = update.effective_user
    sticHello = open("Hello.webp", "rb")
    update.message.reply_sticker(sticHello)
    time.sleep(1)
    update.message.reply_markdown_v2(
        fr'–ü—Ä–∏–≤–µ—Ç, —è –°–æ–≤—ë–Ω–æ–∫ \- –±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ –†–æ—Å—Ç–µ–ª–µ–∫–æ–º –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç–µ\!')
    time.sleep(2.5)
    update.message.reply_text(main_menu_message(),
                              reply_markup=main_menu_keyboard())


############################ Keyboards #########################################
def main_menu_keyboard():
    keyboard = [[KeyboardButton('üö® –ù–µ–æ—Ç–ª–æ–∂–Ω–∞—è –ø–æ–º–æ—â—å')],
                [KeyboardButton('‚òù –ü—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏')],
                [KeyboardButton('üíé –ü–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã')]]
    return ReplyKeyboardMarkup(keyboard)


def first_menu_keyboard():
    keyboard = [[KeyboardButton('üòø  –í–∑–ª–æ–º–∞–ª–∏ –º–æ—é —Å—Ç—Ä–∞–Ω–∏—á–∫—É')],
                [KeyboardButton('üîë  –ù—É–∂–µ–Ω –Ω–∞–¥—ë–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å')],
                [KeyboardButton('üÜò  –ú–µ–Ω—è –∞—Ç–∞–∫—É—é—Ç –º–æ—à–µ–Ω–Ω–∏–∫–∏')],
                [KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è')]]
    return ReplyKeyboardMarkup(keyboard)


def second_menu_keyboard():
    keyboard = [[KeyboardButton('üí¨   –û–±—â–µ–Ω–∏–µ')],
                [KeyboardButton('üëú   –ü–ª–∞—Ç–µ–∂–∏ –∏ –ø–æ–∫—É–ø–∫–∏')],
                [KeyboardButton('‚≠ê   –ì–æ—Å—É—Å–ª—É–≥–∏')],
                [KeyboardButton('üìÆ   –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞')],
                [KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è')]]
    return ReplyKeyboardMarkup(keyboard)


def third_menu_keyboard():
    keyboard = [[KeyboardButton('üìö  –ê–∑–±—É–∫–∞ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç–∞')],
                [KeyboardButton('üé•  –í–∏–¥–µ–æ–∫—É—Ä—Å—ã')],
                [KeyboardButton('üèÜ  –¢–µ—Å—Ç—ã')],
                [KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è')]]
    return ReplyKeyboardMarkup(keyboard)


#############################InlineKeyboards####################################

def hacked_page_menu_inlinekeyboard():
    keyboard = [[InlineKeyboardButton('–í–ö–æ–Ω—Ç–∞–∫—Ç–µ', url='https://vhod.ru/vkontakte/parol/')],
                [InlineKeyboardButton('–û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏', url='https://vhod.ru/odnoklassniki/vzlomali/')],
                [InlineKeyboardButton('–¢–µ–ª–µ–≥—Ä–∞–º',
                                      url='https://web-telegramm.org/telegramm/vopros-otvet-telegramm/345-chto-delat-esli-menya-vzlomali-v-telegramm.html')]]
    return InlineKeyboardMarkup(keyboard)


def password_menu_inlinekeyboard():
    keyboard = [[InlineKeyboardButton('–°–æ–≤–µ—Ç—ã —ç–∫—Å–ø–µ—Ä—Ç–∞',
                                      url='https://www.kaspersky.ru/blog/false-perception-of-it-security-passwords/6460/')],
                [InlineKeyboardButton('–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π', url='https://www.roboform.com/ru/password-generator/')],
                [InlineKeyboardButton('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å', url='https://password.kaspersky.com/ru/')]]
    return InlineKeyboardMarkup(keyboard)


def scam_menu_inlinekeyboard():
    keyboard = [[InlineKeyboardButton('–ö–∞–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –º–æ—à–µ–Ω–Ω–∏–∫–∞',
                                      url='https://fincult.info/article/kak-bystro-raspoznat-moshennika/')],
                [InlineKeyboardButton('–°–æ–æ–±—â–∏—Ç—å –æ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–µ',
                                      url='http://www.sberbank.ru/ru/person/cybersecurity/report')],
                [InlineKeyboardButton('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ —Å–∞–π—Ç–∞',
                                      url='http://www.sberbank.ru/ru/person/cybersecurity/antifraud')]]
    return InlineKeyboardMarkup(keyboard)


def social_menu_inlinekeyboard():
    keyboard = [
        [InlineKeyboardButton('–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏', url='https://vc.ru/social/81702-bezopasnost-v-socialnyh-setyah')],
        [InlineKeyboardButton('WhatsApp', url='https://www.whatsapp.com/safety?lang=ru/')],
        [InlineKeyboardButton('Viber', url='https://goo.su/cetP')]]
    return InlineKeyboardMarkup(keyboard)


def buy_menu_inlinekeyboard():
    keyboard = [[InlineKeyboardButton('–§–∏—à–∏–Ω–≥',
                                      url='https://fincult.info/article/fishing-chto-eto-takoe-i-kak-ot-nego-zashchititsya/')],
                [InlineKeyboardButton('–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω—ã',
                                      url='https://fincult.info/article/bezopasnye-pokupki-v-internete/')],
                [InlineKeyboardButton('–°–∞–π—Ç—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π', url='https://www.avito.ru/journal/safety#how')],
                [InlineKeyboardButton('–ö–∞–∫ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ä—Ç–µ',
                                      url='https://bankstoday.net/last-articles/na-zlo-moshennikam-kak-samomu-ustanovit-sutochnyj-limit-po-kartam-sberbanka')]]
    return InlineKeyboardMarkup(keyboard)


def public_menu_inlinekeyboard():
    keyboard = [[InlineKeyboardButton('–ö–∞–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', url='https://www.gosuslugi.ru/help/faq/login/1')],
                [InlineKeyboardButton('–ó–∞—â–∏—Ç–∞ –æ—Ç –≤–∑–ª–æ–º–∞',
                                      url='https://www.kaspersky.ru/blog/gosuslugi-ru-security/23371/')],
                [InlineKeyboardButton('–ü–æ–º–æ—â—å –ø–µ–Ω—Å–∏–æ–Ω–µ—Ä–∞–º',
                                      url='https://www.gosuslugi.ru/situation/pomoshch_pensioneram')],
                [InlineKeyboardButton('–û—Å—Ç–æ—Ä–æ–∂–Ω–æ:–º–æ—à–µ–Ω–Ω–∏–∫–∏',
                                      url='https://www.gosuslugi.ru/help/news/2020_04_27_scammers')]]
    return InlineKeyboardMarkup(keyboard)


def mail_menu_inlinekeyboard():
    keyboard = [[InlineKeyboardButton('–ó–∞—â–∏—Ç–∞ –æ—Ç –≤–∑–ª–æ–º–∞', url='https://safe-surf.ru/users-of/article/335/')],
                [InlineKeyboardButton('–ö–∞–∫ –±–æ—Ä–æ—Ç—å—Å—è —Å–æ —Å–ø–∞–º–æ–º',
                                      url='https://www.kaspersky.ru/resource-center/threats/spam-phishing')],
                [InlineKeyboardButton('–ü–∏—Å—å–º–∞ –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤', url='https://help.mail.ru/mail/security/letters/money')]]
    return InlineKeyboardMarkup(keyboard)


def video_menu_inlinekeyboard():
    keyboard = [
        [InlineKeyboardButton('–û—Å–Ω–æ–≤—ã —Ä–∞–±–æ—Ç—ã –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ', url='https://www.azbukainterneta.ru/guidelines/video/')],
        [InlineKeyboardButton('–£—Ä–æ–∫–∏ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏', url='https://education.kaspersky.com/ru/')],
        [InlineKeyboardButton('–û–Ω–ª–∞–π–Ω-–∑–∞–Ω—è—Ç–∏—è', url='https://starikam.org/trips/')]]
    return InlineKeyboardMarkup(keyboard)


def e_book_menu_inlinekeyboard():
    keyboard = [[InlineKeyboardButton('–ë–∞–∑–æ–≤—ã–π –∫—É—Ä—Å', url='https://azbukainterneta.ru/schoolbook/base/')],
                [InlineKeyboardButton('–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫—É—Ä—Å', url='https://azbukainterneta.ru/schoolbook/extended/')]]
    return InlineKeyboardMarkup(keyboard)


def test_menu_inlinekeyboard():
    keyboard = [[InlineKeyboardButton('–ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', url='https://public.oprosso.sberbank.ru/p/kvpni4dj')],
                [InlineKeyboardButton('–û–±—â–µ–Ω–∏–µ –≤ —Å–µ—Ç–∏', url='https://public.oprosso.sberbank.ru/p/nsptacoj')],
                [InlineKeyboardButton('–ó–∞—â–∏—Ç–∞ –æ—Ç —Ñ–∏—à–∏–Ω–≥–∞', url='https://public.oprosso.sberbank.ru/p/0yqqefu3')],
                [InlineKeyboardButton('–ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏', url='https://public.oprosso.sberbank.ru/p/y0ax6kdd')]]
    return InlineKeyboardMarkup(keyboard)


############################# Messages #########################################
def main_menu_message():
    return '–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª'


def first_menu_message():
    return '–ß—Ç–æ —É –≤–∞—Å —Å–ª—É—á–∏–ª–æ—Å—å?'


def second_menu_message():
    return '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø—Ä–µ–∂–¥–µ –≤—Å–µ–≥–æ. –û —á—ë–º –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —É–∑–Ω–∞—Ç—å?'


def third_menu_message():
    return '–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?'


############################# InlineMessages ###################################

def hacked_page_inline_menu_message():
    return '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –≤–æ–ª–Ω—É–π—Ç–µ—Å—å. –í–∑–ª–æ–º–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—á–∫—É –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö –º–æ–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å, –ø–æ–ª—å–∑—É—è—Å—å —Å–ª–µ–¥—É—é—â–∏–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏'


def password_inline_menu_message():
    return '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è –ø–∞—Ä–æ–ª—è —Å–∏–º–≤–æ–ª—ã, —Ü–∏—Ñ—Ä—ã, –±–æ–ª—å—à–∏–µ –∏ –º–∞–ª–µ–Ω—å–∫–∏–µ –±—É–∫–≤—ã. –î–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è ‚Äì –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –Ω–µ –º–µ–Ω–µ–µ 8 –∑–Ω–∞–∫–æ–≤. –í—ã –º–æ–∂–µ—Ç–µ —Å–∞–º–∏ –ø—Ä–∏–¥—É–º–∞—Ç—å –ø–∞—Ä–æ–ª—å, –ø—Ä–æ—á–∏—Ç–∞–≤ —Å–æ–≤–µ—Ç—ã —ç–∫—Å–ø–µ—Ä—Ç–∞ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–º –ø–∞—Ä–æ–ª–µ–π.'


def scam_inline_menu_message():
    return 'E—Å–ª–∏ –≤—ã –Ω–∞–∑–≤–∞–ª–∏ –∫–æ–º—É-—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–≤–æ–µ–π –∫–∞—Ä—Ç—ã –∏–ª–∏ –∫–æ–¥ –∏–∑ –°–ú–°, —Å—Ä–æ—á–Ω–æ –∑–≤–æ–Ω–∏—Ç–µ –ø–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º—É –Ω–æ–º–µ—Ä—É 900 (–¥–ª—è –°–±–µ—Ä–∞) –∏–ª–∏ –±–ª–æ–∫–∏—Ä—É–π—Ç–µ –∫–∞—Ä—Ç—É –≤ –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –±–∞–Ω–∫–∞. –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ —Å–∞–π—Ç –ø–æ –±–∞–∑–µ –∏ —Å–æ–æ–±—â–∏—Ç—å –æ –º–æ—à–µ–Ω–Ω–∏–∫–∞—Ö.'


def url_inline_menu_message():
    return '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç?'


def social_inline_menu_message():
    return '–ì–ª–∞–≤–Ω—ã–π —Å–æ–≤–µ—Ç ‚Äì –Ω–µ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –ø–æ —Å—Å—ã–ª–∫–∞–º –∏–∑ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤. –¢–∞–∫–∂–µ –ø–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –≤–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω–∞ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∫–µ–º —É–≥–æ–¥–Ω–æ, –≤ —Ç–æ–º —á–∏—Å–ª–µ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å –±–ª–∞–≥–∏–º–∏ –Ω–∞–º–µ—Ä–µ–Ω–∏—è–º–∏. –ü–æ–¥—Ä–æ–±–Ω–µ–µ:'


def buy_inline_menu_message():
    return '–ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã –ø—Ä–∏ —Å–æ–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π. –ù–µ —Å—Ç–æ–∏—Ç –æ—Ç–¥–∞–≤–∞—Ç—å —Å–≤–æ–∏ –¥–µ–Ω—å–≥–∏ –Ω–µ–∑–Ω–∞–∫–æ–º—Ü—É, –≤–µ—Ä–∏—Ç—å –≤ —Ç–æ, —á—Ç–æ —Ö–æ—Ä–æ—à–∏–π —Ç–æ–≤–∞—Ä –ø—Ä–æ–¥–∞–µ—Ç—Å—è –∑–∞ –∫–æ–ø–µ–π–∫–∏. –ó–∞—â–∏—Ç–∏—Ç—å —Å–≤–æ–∏ –¥–µ–Ω—å–≥–∏ –º–æ–∂–Ω–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–≥—Ä–∞–Ω–∏—á–∏–≤ —Å—É–º–º—É –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ –∫–∞—Ä—Ç–µ –∑–∞ —Å—É—Ç–∫–∏'


def public_inline_menu_message():
    return '–ß–µ—Ä–µ–∑ –ø–æ—Ä—Ç–∞–ª –≥–æ—Å—É—Å–ª—É–≥ –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –≤—Ä–∞—á—É, –æ—Ñ–æ—Ä–º–∏—Ç—å –ª—å–≥–æ—Ç—ã –∏ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ , –æ–ø–ª–∞—Ç–∏—Ç—å –Ω–∞–ª–æ–≥–∏ –∏ –Ω–µ —Ç–æ–ª—å–∫–æ. –£–∑–Ω–∞–π—Ç–µ, –∫–∞–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –ø–æ—Ä—Ç–∞–ª–µ, –∑–∞—â–∏—Ç–∏—Ç—å —Å–≤–æ—é —Å—Ç—Ä–∞–Ω–∏—á–∫—É –∏ –Ω–µ —Å—Ç–∞—Ç—å –∂–µ—Ä—Ç–≤–æ–π –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤:'


def mail_inline_menu_message():
    return '–ü–∏—Å—å–º–∞, –ø—Ä–∏—Ö–æ–¥—è—â–∏–µ –ø–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç–µ, –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤–∏—Ä—É—Å—ã –∏–ª–∏ —Å—Å—ã–ª–∫–∏, –≤–µ–¥—É—â–∏–µ –Ω–∞ –∑–∞—Ä–∞–∂–µ–Ω–Ω—ã–µ —Å–∞–π—Ç—ã. –ù–µ –æ—Ç–∫—Ä—ã–≤–∞–π—Ç–µ –ø–∏—Å—å–º–∞ —Å –≤–ª–æ–∂–µ–Ω–∏—è–º–∏, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± —É–≥—Ä–æ–∑–∞—Ö –∏ –ø—Ä–∞–≤–∏–ª–∞—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:'


def video_inline_menu_message():
    return '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –∫–æ—Ä–æ—Ç–∫–∏–µ –≤–∏–¥–µ–æ—É—Ä–æ–∫–∏, –∞ —Ç–∞–∫–∂–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –æ–Ω–ª–∞–π–Ω-–∑–∞–Ω—è—Ç–∏—è:'


def e_book_inline_menu_message():
    return '–≠—Ç–æ —É—á–µ–±–Ω–∏–∫ –¥–ª—è –ª—é–¥–µ–π —Å—Ç–∞—Ä—à–µ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –±–∞–∑–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è –æ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ –∏ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç–µ, –Ω–∞—É—á–∏—Ç—å—Å—è –æ–±—â–∞—Ç—å—Å—è –ø–æ –≤–∏–¥–µ–æ—Å–≤—è–∑–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏'


def test_inline_menu_message():
    return '–ü—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç—ã, —á—Ç–æ–±—ã –Ω–µ –æ—Å—Ç–∞–≤–∏—Ç—å –º–æ—à–µ–Ω–Ω–∏–∫–∞–º –Ω–∏–∫–∞–∫–∏—Ö —à–∞–Ω—Å–æ–≤ –¥–æ–±—Ä–∞—Ç—å—Å—è –¥–æ –≤–∞—à–∏—Ö –¥–µ–Ω–µ–≥'


############################# Commands #########################################

def help_command(update: Update, context: CallbackContext) -> None:
    #     """Send a message when the command /help is issued."""
    update.message.reply_text('–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞')


def echo(update: Update, context: CallbackContext) -> None:
    #     """Echo the user message."""
    input_text = update.message.text
    if input_text == 'üö® –ù–µ–æ—Ç–ª–æ–∂–Ω–∞—è –ø–æ–º–æ—â—å' or input_text == '–ù–µ–æ—Ç–ª–æ–∂–Ω–∞—è –ø–æ–º–æ—â—å':
        update.message.reply_text(first_menu_message(),
                                  reply_markup=first_menu_keyboard())
    elif input_text == '‚òù –ü—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏' or input_text == '–ü—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏':
        update.message.reply_text(second_menu_message(),
                                  reply_markup=second_menu_keyboard())
    elif input_text == 'üíé –ü–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã' or input_text == '–ü–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã':
        update.message.reply_text(third_menu_message(),
                                  reply_markup=third_menu_keyboard())
    elif input_text == 'üòø  –í–∑–ª–æ–º–∞–ª–∏ –º–æ—é —Å—Ç—Ä–∞–Ω–∏—á–∫—É' or input_text == '–í–∑–ª–æ–º–∞–ª–∏ –º–æ—é —Å—Ç—Ä–∞–Ω–∏—á–∫—É':
        update.message.reply_text(hacked_page_inline_menu_message(),
                                  reply_markup=hacked_page_menu_inlinekeyboard())
    elif input_text == 'üîë  –ù—É–∂–µ–Ω –Ω–∞–¥—ë–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å' or input_text == '–ù—É–∂–µ–Ω –Ω–∞–¥—ë–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å':
        update.message.reply_text(password_inline_menu_message(),
                                  reply_markup=password_menu_inlinekeyboard())
    elif input_text == 'üÜò  –ú–µ–Ω—è –∞—Ç–∞–∫—É—é—Ç –º–æ—à–µ–Ω–Ω–∏–∫–∏' or input_text == '–ú–µ–Ω—è –∞—Ç–∞–∫—É—é—Ç –º–æ—à–µ–Ω–Ω–∏–∫–∏':
        update.message.reply_text(scam_inline_menu_message(),
                                  reply_markup=scam_menu_inlinekeyboard())
    elif input_text == 'üîé  –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∞–π—Ç' or input_text == '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∞–π—Ç':
        global input_site_checker_listener
        input_site_checker_listener = True
        update.message.reply_markdown_v2(
            fr'–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å')

    elif input_site_checker_listener == True:
        output_text = req(input_text)
        keyboard = [[InlineKeyboardButton('–î–∞', url='https://www.virustotal.com/gui/search/' + output_text)]]
        update.message.reply_text(url_inline_menu_message(),
                                  reply_markup=InlineKeyboardMarkup(keyboard))
        input_site_checker_listener = False

    elif input_text == 'üí¨   –û–±—â–µ–Ω–∏–µ' or input_text == '–û–±—â–µ–Ω–∏–µ':
        update.message.reply_text(social_inline_menu_message(),
                                  reply_markup=social_menu_inlinekeyboard())
    elif input_text == 'üëú   –ü–ª–∞—Ç–µ–∂–∏ –∏ –ø–æ–∫—É–ø–∫–∏' or input_text == '–ü–ª–∞—Ç–µ–∂–∏ –∏ –ø–æ–∫—É–ø–∫–∏':
        update.message.reply_text(buy_inline_menu_message(),
                                  reply_markup=buy_menu_inlinekeyboard())
    elif input_text == '‚≠ê   –ì–æ—Å—É—Å–ª—É–≥–∏' or input_text == '–ì–æ—Å—É—Å–ª—É–≥–∏':
        update.message.reply_text(public_inline_menu_message(),
                                  reply_markup=public_menu_inlinekeyboard())
    elif input_text == 'üìÆ   –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞' or input_text == '–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞':
        update.message.reply_text(mail_inline_menu_message(),
                                  reply_markup=mail_menu_inlinekeyboard())
    elif input_text == 'üé•  –í–∏–¥–µ–æ–∫—É—Ä—Å—ã' or input_text == '–í–∏–¥–µ–æ–∫—É—Ä—Å—ã':
        update.message.reply_text(video_inline_menu_message(),
                                  reply_markup=video_menu_inlinekeyboard())
    elif input_text == 'üìö  –ê–∑–±—É–∫–∞ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç–∞' or input_text == '–ê–∑–±—É–∫–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞':
        update.message.reply_text(e_book_inline_menu_message(),
                                  reply_markup=e_book_menu_inlinekeyboard())
    elif input_text == 'üèÜ  –¢–µ—Å—Ç—ã' or input_text == '–¢–µ—Å—Ç—ã':
        update.message.reply_text(test_inline_menu_message(),
                                  reply_markup=test_menu_inlinekeyboard())
    elif input_text == '–í–µ—Ä–Ω—É—Ç—å—Å—è':
        update.message.reply_text(main_menu_message(),
                                  reply_markup=main_menu_keyboard())
    else:
        output_text = bot(input_text)
        update.message.reply_text(output_text)


def main() -> None:
    #     """Start the bot."""
    #     # Create the Updater and pass it your bot's token.
    updater = Updater(token=TOKEN)

    #     # Get the dispatcher to register handlers
    dispatcher = updater.dispatcher

    #     # on different commands - answer in Telegram
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CommandHandler("help", help_command))

    #     # on non command i.e message - echo the message on Telegram
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, echo))
    updater.dispatcher.add_handler(CommandHandler('start', start))

    #     # Start the Bot
    updater.start_polling()

    #     # Run the bot until you press Ctrl-C or the process receives SIGINT,
    #     # SIGTERM or SIGABRT. This should be used most of the time, since
    #     # start_polling() is non-blocking and will stop the bot gracefully.
    updater.idle()


if __name__ == '__main__':
    main()
